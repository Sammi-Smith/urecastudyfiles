proc datasets library=work kill nolist nodetails; quit;
dm out "clear"; dm log "clear";  
*******************************************************************************
*  Copyright Rho, Inc. 2002 all rights reserved                               *
*******************************************************************************;
*******************************************************************************
* Program created using SAS version 9.1
*
* PROGRAM DESCRIPTION:  
*   Programmer(s)           Date(s)         Brief Description of Modifications
*   B Zabel              05/31/11       Create
*   B Zabel                 07/28/11        Re-run
*   B Zabel               08/03/11      Add IL-8
*   K Jaffee            08/23/13      Re-run for year 4 cytokines, add year 4 to shell 
*   K Jaffee            11/20/14      Update code to include year 5, 7 data
*   Alexandre Lockhart  July 25, 2017  Updated codebooks, did code and missing data review.  Commented out factor scores.
*******************************************************************************;

**** 1. Set-up *****************************************************************;
options nodate pageno=1 mprint;
options orientation=landscape ls=96 ps=53 font=SASFONT 6;

*** Library, Titles (1,2) and Footnotes (1) Setup ***;
%inc "S:\RhoFED\ICAC\Studies\TemplateSetup.sas";
%TemplateSetup(/* Name of the program  */
               prog=ChildCytoInnate,
               /* Location to save     */
               pgmpath=S:\RhoFED\ICAC\Studies\URECA\Prog\Derive,
               /* Study library to add */
               study=ureca);

*** Save program source code ***;
dm "file &gpgmpath\&gprog..sas replace";

* Main body of program begins here;

proc format library=library;
value $ site   '01'='Baltimore'
            '02'='Boston'
            '07'='New York'
            '08'='St. Louis';
run;

***********************************************************************************************
                 Create Child Cyto Innate Visits 12, 36, 60, 81/84
***********************************************************************************************;
data ccri1;
set master.ccri;
if studyid ne '.m';    *dataset contains records for 2 never enrolled participants;

site=substr(recruitid, 4, 2);
label site='Study Site';
format site $site.;

avisit2 = input(avisit,8.);

***Fix one CBLO avisit code from a child blood draw done at 84m ;
*hardcodes here have been removed to protect patient confidentiality;

end ;

***Dup check later on shows 3 pts who had both 81 and 84 -- I'm taking the one with more complete data OR if they have 
   data for both, take the 81, they shouldnt have been analyzed at 84 ;
*hardcodes here have been removed to protect patient confidentiality;

***Call all 84s 81 for ease ;
if avisit2=84 then avisit2=81 ;

drop avisit ;
run;





***Checks to be fixed above ;
proc freq data=ccri1 ;
   tables avisit2 / missing ;
run ;
*** ;

data ccytil8;
set master.ccytil8;
if studyid ne '.m';    *dataset contains records for 2 never enrolled participants;

site=substr(recruitid, 4, 2);
label site='Study Site';
format site $site.;

rename aprocdate=aprocdate_il8;
avisit2 = input(avisit,8.);

***Fix one CBLO avisit code from a child blood draw done at 84m ;
*hardcodes here have been removed to protect patient confidentiality;

end ;

***Dup check later on shows 3 pts who had both 81 and 84 -- I'm taking the one with more complete data OR if they have 
   data for both, take the 81, they shouldnt have been analyzed at 84 ;
*hardcodes here have been removed to protect patient confidentiality;

***Call all 84s 81 for ease ;
if avisit2=84 then avisit2=81 ;

drop avisit;
run;

***Checks to be fixed above ;
proc freq data=ccytil8 ;
   tables avisit2 / missing ;
run ;

proc print data=ccytil8 ;
   var studyid ;
   where avisit2=. ;
run ;
*** ;

proc sort data=ccri1 out=ccri_1 ; by studyid avisit2; run;
proc sort data=ccytil8 out=ccytil8_1 ; by studyid avisit2; run;

data ccri_2;
merge ccri_1 ccytil8_1; 
by studyid avisit2;
run;


data rollout;
set ccri_2;

format stimulant $4.;
**Replicate A;
replicate='A';  stimulant='LPS';   ifn_a=ccri_q1b1;  ifn_g=ccri_q1b2;  il_8=ccytil8_q1a1;  il_10=ccri_q1b3;  il_12p40=ccri_q1b4;  tnf_a=ccri_q1b7;  output;
replicate='A';  stimulant='MC24';  ifn_a=ccri_q1c1;  ifn_g=ccri_q1c2;  il_8=ccytil8_q1b1;  il_10=ccri_q1c3;  il_12p40=ccri_q1c4;  tnf_a=ccri_q1c7;  output;
replicate='A';  stimulant='PIC';   ifn_a=ccri_q1d1;  ifn_g=ccri_q1d2;  il_8=ccytil8_q1c1;  il_10=ccri_q1d3;  il_12p40=ccri_q1d4;  tnf_a=ccri_q1d7;  output;
replicate='A';  stimulant='PG';    ifn_a=ccri_q1e1;  ifn_g=ccri_q1e2;  il_8=ccytil8_q1d1;  il_10=ccri_q1e3;  il_12p40=ccri_q1e4;  tnf_a=ccri_q1e7;  output;
replicate='A';  stimulant='CpG';   ifn_a=ccri_q1f1;  ifn_g=ccri_q1f2;  il_8=ccytil8_q1e1;  il_10=ccri_q1f3;  il_12p40=ccri_q1f4;  tnf_a=ccri_q1f7;  output;
replicate='A';  stimulant='GDQ';   ifn_a=ccri_q1g1;  ifn_g=ccri_q1g2;  il_8=ccytil8_q1f1;  il_10=ccri_q1g3;  il_12p40=ccri_q1g4;  tnf_a=ccri_q1g7;  output; 
replicate='A';  stimulant='RSV';   ifn_a=ccri_q1h1;  ifn_g=ccri_q1h2;  il_8=ccytil8_q1g1;  il_10=ccri_q1h3;  il_12p40=ccri_q1h4;  tnf_a=ccri_q1h7;  output;
replicate='A';  stimulant='RV';    ifn_a=ccri_q1i1;  ifn_g=ccri_q1i2;  il_8=ccytil8_q1h1;  il_10=ccri_q1i3;  il_12p40=ccri_q1i4;  tnf_a=ccri_q1i7;  output;

**Replicate B;
replicate='B';  stimulant='LPS';   ifn_a=ccri_q2b1;  ifn_g=ccri_q2b2;  il_8=ccytil8_q3a1;  il_10=ccri_q2b3;  il_12p40=ccri_q2b4;  tnf_a=ccri_q2b7;  output;
replicate='B';  stimulant='MC24';  ifn_a=ccri_q2c1;  ifn_g=ccri_q2c2;  il_8=ccytil8_q3b1;  il_10=ccri_q2c3;  il_12p40=ccri_q2c4;  tnf_a=ccri_q2c7;  output;
replicate='B';  stimulant='PIC';   ifn_a=ccri_q2d1;  ifn_g=ccri_q2d2;  il_8=ccytil8_q3c1;  il_10=ccri_q2d3;  il_12p40=ccri_q2d4;  tnf_a=ccri_q2d7;  output;
replicate='B';  stimulant='PG';    ifn_a=ccri_q2e1;  ifn_g=ccri_q2e2;  il_8=ccytil8_q3d1;  il_10=ccri_q2e3;  il_12p40=ccri_q2e4;  tnf_a=ccri_q2e7;  output;
replicate='B';  stimulant='CpG';   ifn_a=ccri_q2f1;  ifn_g=ccri_q2f2;  il_8=ccytil8_q3e1;  il_10=ccri_q2f3;  il_12p40=ccri_q2f4;  tnf_a=ccri_q2f7;  output;
replicate='B';  stimulant='GDQ';   ifn_a=ccri_q2g1;  ifn_g=ccri_q2g2;  il_8=ccytil8_q3f1;  il_10=ccri_q2g3;  il_12p40=ccri_q2g4;  tnf_a=ccri_q2g7;  output;
replicate='B';  stimulant='RSV';   ifn_a=ccri_q2h1;  ifn_g=ccri_q2h2;  il_8=ccytil8_q3g1;  il_10=ccri_q2h3;  il_12p40=ccri_q2h4;  tnf_a=ccri_q2h7;  output;
replicate='B';  stimulant='RV';    ifn_a=ccri_q2i1;  ifn_g=ccri_q2i2;  il_8=ccytil8_q3h1;  il_10=ccri_q2i3;  il_12p40=ccri_q2i4;  tnf_a=ccri_q2i7;  output;

keep recruitid studyid aprocdate aprocdate_il8 avisit2 replicate stimulant ifn_a ifn_g il_8 il_10 il_12p40 tnf_a;
run;



data ccri2;
set rollout;

if ifn_a=.h or ifn_a> .z then D_ifn_a=1;
if ifn_g=.h or ifn_g> .z then D_ifn_g=1;
if il_10=.h or il_10> .z then D_il_10=1;
if il_12p40=.h or il_12p40> .z then D_il_12p40=1;
if tnf_a=.h or tnf_a > .z then D_tnf_a=1;
if il_8 > .z then D_il_8=1;

**assign lower and upper values and marker for non-detectable;
**according to A. Dresen std curve files;
if ifn_a=.b or ifn_a=.e or .z< ifn_a < 3.2 then do;    ifn_a=3.1; D_ifn_a=0; end;
if ifn_g=.b or ifn_g=.e or .z< ifn_g < 3.2 then do;    ifn_g=3.1; D_ifn_g=0; end;
if il_10=.b or il_10=.e or .z< il_10 < 3.2 then do;      il_10=3.1; D_il_10=0; end;
if il_12p40=.b or il_12p40=.e or .z< il_12p40 < 3.2 then do; il_12p40=3.1; D_il_12p40=0; end;
if tnf_a=.b or tnf_a=.e or .z< tnf_a < 3.2 then do;    tnf_a=3.1; D_tnf_a=0; end;
if il_8=.b or il_8=.e or .z< il_8 < 15600 then do; il_8=15599; D_il_8=0; end;

rename avisit2=avisit;
format D_ifn_a D_ifn_g D_il_10 D_il_12p40 D_tnf_a D_il_8 yesnofm.;
run;

data ccri3;
set ccri2;

**log-transform all results;
array oldres (6) ifn_a ifn_g il_8 il_10 il_12p40 tnf_a;
array logres (6) ifn_a_l ifn_g_l il_8_l il_10_l il_12p40_l tnf_a_l;
do i=1 to 6;
logres(i)=log10(oldres(i));
end;

drop i;
run;

proc sort data=ccri3; by studyid avisit; run;

************************************************************************************************
                    Create Child Cyto Innate Visit 0 
************************************************************************************************;
data cslri1;
set master.cslri;
if studyid ne '.m';    *dataset contains records for 2 never enrolled participants;

site=substr(recruitid, 4, 2);
label site='Study Site';
format site $site.;

** ID errors found in spreadsheet; 
** Thawed samples removed for the present;
*hardcodes here have been removed to protect patient confidentiality;

if avisit='b' then avisit=0;
avisit2 = input(avisit,8.);
drop avisit;
run;

data cslril8;
set master.cslril8;
if studyid ne '.m';    *dataset contains records for 2 never enrolled participants;

site=substr(recruitid, 4, 2);
label site='Study Site';
format site $site.;

** ID errors found in spreadsheet; 
** Thawed samples removed for the present;
*hardcodes here have been removed to protect patient confidentiality;

if avisit='b' then avisit="0";
avisit2 = input(put(avisit,$8.),8.);

rename aprocdate=aprocdate_il8;
drop avisit;
run;

proc sort data=cslri1 out=cslri1_1; by studyid avisit2; run;
proc sort data=cslril8 out=cslril8_1; by studyid avisit2; run;

data cslri1_2;
merge cslri1_1 cslril8_1; 
by studyid avisit2;
run;


data rollout2;
set cslri1_2;

format stimulant $4.;
**Replicate A-1;
plate=cslri_q1a;  replicate='A';  duplicate=1;  stimulant='LPS';  ifn_a=cslri_q1b1;  ifn_g=cslri_q1b2;  il_8=cslril8_q1a1; il_10=cslri_q1b3;  il_12p40=cslri_q1b4;  tnf_a=cslri_q1b7; output;
plate=cslri_q1a;  replicate='A';  duplicate=1;  stimulant='MC24'; ifn_a=cslri_q1c1;  ifn_g=cslri_q1c2;  il_8=cslril8_q1b1; il_10=cslri_q1c3;  il_12p40=cslri_q1c4;  tnf_a=cslri_q1c7; output;
plate=cslri_q1a;  replicate='A';  duplicate=1;  stimulant='PIC';  ifn_a=cslri_q1d1;    ifn_g=cslri_q1d2;  il_8=cslril8_q1c1; il_10=cslri_q1d3;  il_12p40=cslri_q1d4;  tnf_a=cslri_q1d7; output;
plate=cslri_q1a;  replicate='A';  duplicate=1;  stimulant='PG';     ifn_a=cslri_q1e1;  ifn_g=cslri_q1e2;  il_8=cslril8_q1d1; il_10=cslri_q1e3;  il_12p40=cslri_q1e4;  tnf_a=cslri_q1e7; output;
plate=cslri_q1a;  replicate='A';  duplicate=1;  stimulant='CpG';  ifn_a=cslri_q1f1;    ifn_g=cslri_q1f2;  il_8=cslril8_q1e1; il_10=cslri_q1f3;  il_12p40=cslri_q1f4;  tnf_a=cslri_q1f7; output;
plate=cslri_q1a;  replicate='A';  duplicate=1;  stimulant='MC5';  ifn_a=cslri_q1g1;  ifn_g=cslri_q1g2;  il_8=cslril8_q1f1; il_10=cslri_q1g3;  il_12p40=cslri_q1g4;  tnf_a=cslri_q1g7; output;
plate=cslri_q1a;  replicate='A';  duplicate=1;  stimulant='RSV';  ifn_a=cslri_q1h1;    ifn_g=cslri_q1h2;  il_8=cslril8_q1g1; il_10=cslri_q1h3;  il_12p40=cslri_q1h4;  tnf_a=cslri_q1h7; output;

**Replicate B-1;
plate=cslri_q3a;  replicate='B';  duplicate=1;  stimulant='LPS';  ifn_a=cslri_q3b1;  ifn_g=cslri_q3b2;  il_8=cslril8_q3a1; il_10=cslri_q3b3;  il_12p40=cslri_q3b4;  tnf_a=cslri_q3b7; output;
plate=cslri_q3a;  replicate='B';  duplicate=1;  stimulant='MC24'; ifn_a=cslri_q3c1;  ifn_g=cslri_q3c2;  il_8=cslril8_q3b1; il_10=cslri_q3c3;  il_12p40=cslri_q3c4;  tnf_a=cslri_q3c7; output;
plate=cslri_q3a;  replicate='B';  duplicate=1;  stimulant='PIC';  ifn_a=cslri_q3d1;  ifn_g=cslri_q3d2;  il_8=cslril8_q3c1; il_10=cslri_q3d3;  il_12p40=cslri_q3d4;  tnf_a=cslri_q3d7; output;
plate=cslri_q3a;  replicate='B';  duplicate=1;  stimulant='PG';   ifn_a=cslri_q3e1;  ifn_g=cslri_q3e2;  il_8=cslril8_q3d1; il_10=cslri_q3e3;  il_12p40=cslri_q3e4;  tnf_a=cslri_q3e7; output;
plate=cslri_q3a;  replicate='B';  duplicate=1;  stimulant='CpG';  ifn_a=cslri_q3f1;  ifn_g=cslri_q3f2;  il_8=cslril8_q3e1; il_10=cslri_q3f3;  il_12p40=cslri_q3f4;  tnf_a=cslri_q3f7; output;
plate=cslri_q3a;  replicate='B';  duplicate=1;  stimulant='MC5';  ifn_a=cslri_q3g1;  ifn_g=cslri_q3g2;  il_8=cslril8_q3f1; il_10=cslri_q3g3;  il_12p40=cslri_q3g4;  tnf_a=cslri_q3g7; output;
plate=cslri_q3a;  replicate='B';  duplicate=1;  stimulant='RSV';  ifn_a=cslri_q3h1;  ifn_g=cslri_q3h2;  il_8=cslril8_q3g1; il_10=cslri_q3h3;  il_12p40=cslri_q3h4;  tnf_a=cslri_q3h7; output;

rename avisit2=avisit;
keep recruitid studyid aprocdate aprocdate_il8 avisit2 plate replicate duplicate stimulant ifn_a ifn_g il_8 il_10 il_12p40 tnf_a;
run; 


*AL: ;
/*
data cslri2;
set rollout2;

***calibration equations for birth cytokines: upstate -> millepore ;
   if aVisit=0 and tnf_a >= 6.9 then tnf_a=1.19 + 0.68*tnf_a ;
   if tnf_a < 6.9 then tnf_a = tnf_a ;
   if aVisit=0 and il_12p40 >= 11 then il_12p40=-0.24 + 0.68*il_12p40;
   if il_12p40 < 11 then il_12p40 = il_12p40 ;
   if aVisit=0  and il_10 >= 6.9 then il_10=0.56 + 0.86*il_10 ;
   if il_10 < 6.9 then il_10 = il_10 ;
   if aVisit=0 and ifn_g >= 6.9 then ifn_g=0.39 + 0.71*ifn_g ;
   if ifn_g < 6.9 then ifn_g = ifn_g ;
   if aVisit=0 and ifn_a >= 8.2 then ifn_a=-0.53 + 1.05*ifn_a ;
   if ifn_a < 8.2 then ifn_a = ifn_a ;

if aVisit=0 and (tnf_a >= 6.9 or il_12p40 >= 11 or il_10 >= 6.9 or ifn_g >= 6.9 or ifn_a >= 8.2) then imputed=1;
else imputed=0;
run; */

data cslri3;
set rollout2;

if ifn_a=.h or ifn_a> .z then D_ifn_a=1;
if ifn_g=.h or ifn_g> .z then D_ifn_g=1;
if il_8 > .z then D_il_8=1;
if il_10=.h or il_10> .z then D_il_10=1;
if il_12p40=.h or il_12p40> .z then D_il_12p40=1;
if tnf_a=.h or tnf_a > .z then D_tnf_a=1;

**assign lower and upper values and marker for non-detectable;
**03/02/07 edited according to M. Burger email of 10/25/06;
**01/15/08 edited according to A. Dresen email of 01/15/08;
if ifn_a=.b or ifn_a=.e or .z< ifn_a < 8.2 then do; ifn_a=8.1; D_ifn_a=0; end;
if ifn_g=.b or ifn_g=.e or .z< ifn_g < 6.9 then do; ifn_g=6.8; D_ifn_g=0; end;
if il_8=.b or il_8=.e or .z< il_8 < 15600 then do; il_8=15599; D_il_8=0; end;
if il_10=.b or il_10=.e or .z< il_10 < 6.9 then do; il_10=6.8; D_il_10=0; end;
if il_12p40=.b or il_12p40=.e or .z< il_12p40 < 11 then do; il_12p40=10.9; D_il_12p40=0; end;
if tnf_a=.b or tnf_a=.e or .z< tnf_a < 6.9 then do; tnf_a=6.8; D_tnf_a=0; end;

format D_ifn_a D_ifn_g D_il_8 D_il_10 D_il_12p40 D_tnf_a yesnofm.;
run;
 
data cslri4;
set cslri3;

**log-transform all results;
array oldres (6) ifn_a ifn_g il_8 il_10 il_12p40 tnf_a;
array logres (6) ifn_a_l ifn_g_l il_8_l il_10_l il_12p40_l tnf_a_l;
do i=1 to 6;
logres(i)=log10(oldres(i));
end;
run; 

data cslri5;
set cslri4;
if duplicate=1;
drop i;
run;

proc sort data=cslri5; by studyid avisit; run;


/***** Set visits 0, 12, 36, 60, 81/84 *****/
data set_innate;
set ccri3 cslri5;
by studyid;

label    ifn_a       ='IFN-a'
      ifn_g       ='IFN-g'
      il_8      ='IL-8'
      il_10       ='IL-10'
      il_12p40    ='IL-12(p40)'
      tnf_a      ='TNF-a'
      ifn_a_l    ='IFN-a, log-transformed'
      ifn_g_l    ='IFN-g, log-transformed'
      il_8_l      ='IL-8, log-transformed'
      il_10_l    ='IL-10, log-transformed'
      il_12p40_l    ='IL-12(p40), log-transformed'
      tnf_a_l      ='TNF-a, log-transformed'
      D_ifn_a    ='Detectable IFN-a'
      D_ifn_g    ='Detectable IFN-g'
      D_il_8      ='Detectable IL-8'
      D_il_10    ='Detectable IL-10'
      D_il_12p40    ='Detectable IL-12(p40)'
      D_tnf_a      ='Detectable TNF-a'
      aprocdate_il8= 'Processing Date - IL-8'
      ;

      if avisit=81 then avisit=84;
run;

/************************************************************************************
* Check for duplicates - none as of 02/20/2015
*************************************************************************************/
proc sort data=set_innate nodupkey dupout=dups;
  by studyid avisit stimulant replicate;
run;


/************************************************************************************
* Create Shell
*************************************************************************************/
data shell;
 set derive.groups;

 site=substr(studyid, 4, 2);
 label    site="Study Site";
 format site $site.;
 length stimulant $100;

 do avisit = 0, 12, 36, 48, 60, 72, 84;
  if avisit = 0 then 
   do stimulant = "CpG","LPS","MC24","MC5","PG","PIC","RSV";
   do replicate = "A","B";
   year=0;
    output;
    end;
   end;
  if avisit = 12 then 
   do stimulant = "CpG","GDQ","LPS","MC24","PG","PIC","RSV","RV";
   do replicate = "A","B";
   year=1;
    output;
    end;
   end;
  if avisit = 36 then 
   do stimulant = "CpG","GDQ","LPS","MC24","PG","PIC","RSV","RV";
   do replicate = "A","B";
   year=3;
    output;
    end;
   end;
 if avisit = 48 then 
   do stimulant = "CpG","GDQ","LPS","MC24","PG","PIC","RSV","RV";
   do replicate = "A","B";
   year=4;
    output;
    end;
   end;
 if avisit = 60 then 
   do stimulant = "CpG","GDQ","LPS","MC24","PG","PIC","RSV","RV";
   do replicate = "A","B";
   year=5;
    output;
    end;
   end;
 if avisit = 72 then 
   do stimulant = "CpG","GDQ","LPS","MC24","PG","PIC","RSV","RV";
   do replicate = "A","B";
   year=6;
    output;
    end;
   end;
 if avisit = 84 then 
   do stimulant = "CpG","GDQ","LPS","MC24","PG","PIC","RSV","RV";
   do replicate = "A","B";
   year=7;
    output;
    end;
   end;
end ;

 keep studyid recruitid site avisit year group stimulant replicate;
run;

****************************************************************************************
                   Save derived dataset for Child Cytokine Innate
****************************************************************************************;
data derive.childcytoinnate_all;   
 merge shell set_innate (in=a);
 by studyid avisit stimulant replicate;
 if a=1 then childcytoinnate=1; else childcytoinnate=0;
run;
proc sort data=derive.childcytoinnate_all out=ct;
   by stimulant;
   run;

proc freq data=ct;
   tables il_8 ; by stimulant;
   where il_8=m;
run;


proc sort data=derive.childcytoinnate_all out=cytoin ; by studyid recruitid avisit aprocdate aprocdate_il8 stimulant site year; run ;

proc transpose data=cytoin out=ci_transpose ;
   var il_8 il_10 ifn_a ifn_g il_12p40 tnf_a;
   by studyid recruitid avisit aprocdate aprocdate_il8 stimulant site group year;
   id replicate;
run ;

***If A is missing, then pick B values...otherwise use A only ;
data ci_transpose2 ;
   set ci_transpose ;
   if A < 0 then cyto_val = B ;
      else cyto_val = A ;
   if A < 0 then rep = 2;
       else rep = 1;
run ;

proc format;
value replicate 1='A' 2='B';
run;

data trans; 
set ci_transpose2;
by studyid avisit stimulant;

retain il_8 rep_il_8 il_10 rep_il_10 ifn_a rep_ifn_a ifn_g rep_ifn_g il_12p40 rep_il_12p40 tnf_a rep_tnf_a;

array vars{12} il_8 rep_il_8 il_10 rep_il_10 ifn_a rep_ifn_a ifn_g rep_ifn_g il_12p40 rep_il_12p40 tnf_a rep_tnf_a;
   if first.stimulant then do i = 1 to 12;
   vars(i)=.; 
end;

if _NAME_='il_8' then do;
    il_8=cyto_val; rep_il_8=rep;
end;
if _NAME_='il_10' then do;
   il_10=cyto_val; rep_il_10=rep;
end;
if _NAME_='ifn_a' then do;
   ifn_a=cyto_val; rep_ifn_a=rep; 
end;
if _NAME_='ifn_g' then do;
   ifn_g=cyto_val; rep_ifn_g=rep;
end;
if _NAME_='il_12p40' then do;
   il_12p40=cyto_val; rep_il_12p40=rep;
end;
if _NAME_='tnf_a' then do;
   tnf_a=cyto_val; rep_tnf_a=rep;
end;
if last.stimulant then output;

format rep_il_8 rep_il_10 rep_ifn_a rep_ifn_g rep_il_12p40 rep_tnf_a replicate.;

drop i _NAME_ _LABEL_ cyto_val A B rep;
run;

*** Create Detectable (Y/N);
data long;
set trans;

if ifn_a=.h or ifn_a> .z then D_ifn_a=1;
if ifn_g=.h or ifn_g> .z then D_ifn_g=1;
if il_8 > .z then D_il_8=1;
if il_10=.h or il_10> .z then D_il_10=1;
if il_12p40=.h or il_12p40> .z then D_il_12p40=1;
if tnf_a=.h or tnf_a > .z then D_tnf_a=1;

**assign lower and upper values and marker for non-detectable;
**according to A. Dresen std curve files;
if ifn_a=.b or ifn_a=.e or .z< ifn_a < 3.2 then do;    ifn_a=3.1;  D_ifn_a=0; end;
if ifn_g=.b or ifn_g=.e or .z< ifn_g < 3.2 then do;    ifn_g=3.1;  D_ifn_g=0; end;
if il_8=.b or il_8=.e or .z< il_8 < 15600 then do;      il_8=15599; D_il_8=0; end;
if il_10=.b or il_10=.e or .z< il_10 < 3.2 then do;      il_10=3.1;  D_il_10=0; end;
if il_12p40=.b or il_12p40=.e or .z< il_12p40 < 3.2 then do; il_12p40=3.1; D_il_12p40=0; end;
if tnf_a=.b or tnf_a=.e or .z< tnf_a < 3.2 then do;    tnf_a=3.1;  D_tnf_a=0; end;

format D_ifn_a D_ifn_g D_il_8 D_il_10 D_il_12p40 D_tnf_a yesnofm.;
run;

*** Log-transform results;
data long2;
set long;

array oldres (6) ifn_a ifn_g il_8 il_10 il_12p40 tnf_a;
array logres (6) ifn_a_l ifn_g_l il_8_l il_10_l il_12p40_l tnf_a_l;
do i=1 to 6;
logres(i)=log10(oldres(i));
end;

drop i;
run;

************************************************************************************
          Derive Dataset: long, one rec per person per stimulant per visit
***********************************************************************************;
data derive.childcytoinnate_l;                 
set long2;
label    ifn_a       ='IFN-a'
      ifn_g       ='IFN-g'
      il_8       ='IL-8'
      il_10       ='IL-10'
      il_12p40    ='IL-12(p40)'
      tnf_a      ='TNF-a'
      ifn_a_l    ='IFN-a, log-transformed'
      ifn_g_l    ='IFN-g, log-transformed'
      il_8_l      ='IL-8, log-transformed'
      il_10_l    ='IL-10, log-transformed'
      il_12p40_l    ='IL-12(p40), log-transformed'
      tnf_a_l      ='TNF-a, log-transformed'
      D_ifn_a    ='Detectable IFN-a'
      D_ifn_g    ='Detectable IFN-g'
      D_il_8=      ='Detectable IL-8'
      D_il_10    ='Detectable IL-10'
      D_il_12p40    ='Detectable IL-12(p40)'
      D_tnf_a      ='Detectable TNF-a'
        rep_ifn_a   ='Replicate ifn_a'
        rep_ifn_g   ='Replicate ifn_g'
      rep_il_8   ='Replicate il_8'
       rep_il_10   ='Replicate il_10'
       rep_il_12p40='Replicate il_12p40'
       rep_tnf_a   ='Replicate tnf_a';
run;

***Transpose dataset to become wide, one rec per studyid per visit;
data wide1; 
set long2;
by studyid avisit;

retain  ifn_a_CpG     ifn_g_CpG     il_8_CpG     il_10_CpG     il_12p40_CpG     tnf_a_CpG   
      ifn_a_GDQ     ifn_g_GDQ     il_8_GDQ      il_10_GDQ     il_12p40_GDQ     tnf_a_GDQ    
      ifn_a_LPS     ifn_g_LPS     il_8_LPS     il_10_LPS     il_12p40_LPS     tnf_a_LPS   
      ifn_a_MC24    ifn_g_MC24    il_8_MC24      il_10_MC24    il_12p40_MC24    tnf_a_MC24    
      ifn_a_MC5     ifn_g_MC5     il_8_MC5      il_10_MC5     il_12p40_MC5     tnf_a_MC5   
      ifn_a_PG      ifn_g_PG      il_8_PG      il_10_PG      il_12p40_PG      tnf_a_PG   
      ifn_a_PIC     ifn_g_PIC     il_8_PIC       il_10_PIC     il_12p40_PIC     tnf_a_PIC   
      ifn_a_RSV     ifn_g_RSV     il_8_RSV      il_10_RSV     il_12p40_RSV     tnf_a_RSV   
      ifn_a_RV      ifn_g_RV      il_8_RV      il_10_RV      il_12p40_RV      tnf_a_RV   

      D_ifn_a_CpG   D_ifn_g_CpG   D_il_8_CpG     D_il_10_CpG   D_il_12p40_CpG   D_tnf_a_CpG   
      D_ifn_a_GDQ   D_ifn_g_GDQ   D_il_8_GDQ     D_il_10_GDQ   D_il_12p40_GDQ   D_tnf_a_GDQ    
      D_ifn_a_LPS   D_ifn_g_LPS   D_il_8_LPS     D_il_10_LPS   D_il_12p40_LPS   D_tnf_a_LPS   
      D_ifn_a_MC24  D_ifn_g_MC24  D_il_8_MC24     D_il_10_MC24  D_il_12p40_MC24  D_tnf_a_MC24    
      D_ifn_a_MC5   D_ifn_g_MC5   D_il_8_MC5     D_il_10_MC5   D_il_12p40_MC5   D_tnf_a_MC5   
      D_ifn_a_PG    D_ifn_g_PG    D_il_8_PG     D_il_10_PG    D_il_12p40_PG    D_tnf_a_PG   
      D_ifn_a_PIC   D_ifn_g_PIC   D_il_8_PIC     D_il_10_PIC   D_il_12p40_PIC   D_tnf_a_PIC   
      D_ifn_a_RSV   D_ifn_g_RSV   D_il_8_RSV     D_il_10_RSV   D_il_12p40_RSV   D_tnf_a_RSV   
      D_ifn_a_RV    D_ifn_g_RV    D_il_8_RV     D_il_10_RV    D_il_12p40_RV    D_tnf_a_RV   

      ifn_a_l_CpG   ifn_g_l_CpG   il_8_l_CpG    il_10_l_CpG   il_12p40_l_CpG   tnf_a_l_CpG   
      ifn_a_l_GDQ   ifn_g_l_GDQ   il_8_l_GDQ    il_10_l_GDQ   il_12p40_l_GDQ   tnf_a_l_GDQ    
      ifn_a_l_LPS   ifn_g_l_LPS   il_8_l_LPS    il_10_l_LPS   il_12p40_l_LPS   tnf_a_l_LPS   
      ifn_a_l_MC24  ifn_g_l_MC24  il_8_l_MC24   il_10_l_MC24  il_12p40_l_MC24  tnf_a_l_MC24    
      ifn_a_l_MC5   ifn_g_l_MC5   il_8_l_MC5    il_10_l_MC5   il_12p40_l_MC5   tnf_a_l_MC5   
      ifn_a_l_PG    ifn_g_l_PG    il_8_l_PG     il_10_l_PG    il_12p40_l_PG    tnf_a_l_PG   
      ifn_a_l_PIC   ifn_g_l_PIC   il_8_l_PIC    il_10_l_PIC   il_12p40_l_PIC   tnf_a_l_PIC   
      ifn_a_l_RSV   ifn_g_l_RSV   il_8_l_RSV    il_10_l_RSV   il_12p40_l_RSV   tnf_a_l_RSV   
      ifn_a_l_RV    ifn_g_l_RV    il_8_l_RV     il_10_l_RV    il_12p40_l_RV    tnf_a_l_RV   ;

         

array vars{162}  
      ifn_a_CpG     ifn_g_CpG     il_8_CpG     il_10_CpG     il_12p40_CpG     tnf_a_CpG   
      ifn_a_GDQ     ifn_g_GDQ     il_8_GDQ      il_10_GDQ     il_12p40_GDQ     tnf_a_GDQ    
      ifn_a_LPS     ifn_g_LPS     il_8_LPS     il_10_LPS     il_12p40_LPS     tnf_a_LPS   
      ifn_a_MC24    ifn_g_MC24    il_8_MC24      il_10_MC24    il_12p40_MC24    tnf_a_MC24    
      ifn_a_MC5     ifn_g_MC5     il_8_MC5      il_10_MC5     il_12p40_MC5     tnf_a_MC5   
      ifn_a_PG      ifn_g_PG      il_8_PG      il_10_PG      il_12p40_PG      tnf_a_PG   
      ifn_a_PIC     ifn_g_PIC     il_8_PIC       il_10_PIC     il_12p40_PIC     tnf_a_PIC   
      ifn_a_RSV     ifn_g_RSV     il_8_RSV      il_10_RSV     il_12p40_RSV     tnf_a_RSV   
      ifn_a_RV      ifn_g_RV      il_8_RV      il_10_RV      il_12p40_RV      tnf_a_RV   

      D_ifn_a_CpG   D_ifn_g_CpG   D_il_8_CpG     D_il_10_CpG   D_il_12p40_CpG   D_tnf_a_CpG   
      D_ifn_a_GDQ   D_ifn_g_GDQ   D_il_8_GDQ     D_il_10_GDQ   D_il_12p40_GDQ   D_tnf_a_GDQ    
      D_ifn_a_LPS   D_ifn_g_LPS   D_il_8_LPS     D_il_10_LPS   D_il_12p40_LPS   D_tnf_a_LPS   
      D_ifn_a_MC24  D_ifn_g_MC24  D_il_8_MC24     D_il_10_MC24  D_il_12p40_MC24  D_tnf_a_MC24    
      D_ifn_a_MC5   D_ifn_g_MC5   D_il_8_MC5     D_il_10_MC5   D_il_12p40_MC5   D_tnf_a_MC5   
      D_ifn_a_PG    D_ifn_g_PG    D_il_8_PG     D_il_10_PG    D_il_12p40_PG    D_tnf_a_PG   
      D_ifn_a_PIC   D_ifn_g_PIC   D_il_8_PIC     D_il_10_PIC   D_il_12p40_PIC   D_tnf_a_PIC   
      D_ifn_a_RSV   D_ifn_g_RSV   D_il_8_RSV     D_il_10_RSV   D_il_12p40_RSV   D_tnf_a_RSV   
      D_ifn_a_RV    D_ifn_g_RV    D_il_8_RV     D_il_10_RV    D_il_12p40_RV    D_tnf_a_RV   

      ifn_a_l_CpG   ifn_g_l_CpG   il_8_l_CpG    il_10_l_CpG   il_12p40_l_CpG   tnf_a_l_CpG   
      ifn_a_l_GDQ   ifn_g_l_GDQ   il_8_l_GDQ    il_10_l_GDQ   il_12p40_l_GDQ   tnf_a_l_GDQ    
      ifn_a_l_LPS   ifn_g_l_LPS   il_8_l_LPS    il_10_l_LPS   il_12p40_l_LPS   tnf_a_l_LPS   
      ifn_a_l_MC24  ifn_g_l_MC24  il_8_l_MC24   il_10_l_MC24  il_12p40_l_MC24  tnf_a_l_MC24    
      ifn_a_l_MC5   ifn_g_l_MC5   il_8_l_MC5    il_10_l_MC5   il_12p40_l_MC5   tnf_a_l_MC5   
      ifn_a_l_PG    ifn_g_l_PG    il_8_l_PG     il_10_l_PG    il_12p40_l_PG    tnf_a_l_PG   
      ifn_a_l_PIC   ifn_g_l_PIC   il_8_l_PIC    il_10_l_PIC   il_12p40_l_PIC   tnf_a_l_PIC   
      ifn_a_l_RSV   ifn_g_l_RSV   il_8_l_RSV    il_10_l_RSV   il_12p40_l_RSV   tnf_a_l_RSV   
      ifn_a_l_RV    ifn_g_l_RV    il_8_l_RV     il_10_l_RV    il_12p40_l_RV    tnf_a_l_RV   ;

   if first.avisit then do i = 1 to 162;
   vars(i)=.; 
end;

if stimulant='CpG' then do;
   ifn_a_CpG=ifn_a;       ifn_g_CpG=ifn_g;      il_8_CpG=il_8;          il_10_CpG=il_10;          il_12p40_CpG=il_12p40;       tnf_a_CpG=tnf_a;
   D_ifn_a_CpG=D_ifn_a;   D_ifn_g_CpG=D_ifn_g;  D_il_8_CpG=D_il_8;     D_il_10_CpG=D_il_10;      D_il_12p40_CpG=D_il_12p40;   D_tnf_a_CpG=D_tnf_a;
   ifn_a_l_CpG=ifn_a_l;   ifn_g_l_CpG=ifn_g_l;  il_8_l_CpG=il_8_l;     il_10_l_CpG=il_10_l;      il_12p40_l_CpG=il_12p40_l;   tnf_a_l_CpG=tnf_a_l;
end;
if stimulant='GDQ' then do;
   ifn_a_GDQ=ifn_a;       ifn_g_GDQ=ifn_g;      il_8_GDQ=il_8;         il_10_GDQ=il_10;         il_12p40_GDQ=il_12p40;       tnf_a_GDQ=tnf_a;    
   D_ifn_a_GDQ=D_ifn_a;   D_ifn_g_GDQ=D_ifn_g;  D_il_8_GDQ=D_il_8;     D_il_10_GDQ=D_il_10;      D_il_12p40_GDQ=D_il_12p40;   D_tnf_a_GDQ=D_tnf_a;
   ifn_a_l_GDQ=ifn_a_l;   ifn_g_l_GDQ=ifn_g_l;  il_8_l_GDQ=il_8_l;     il_10_l_GDQ=il_10_l;      il_12p40_l_GDQ=il_12p40_l;   tnf_a_l_GDQ=tnf_a_l; 
end;
if stimulant='LPS' then do;
   ifn_a_LPS=ifn_a;       ifn_g_LPS=ifn_g;      il_8_LPS=il_8;         il_10_LPS=il_10;        il_12p40_LPS=il_12p40;       tnf_a_LPS=tnf_a;
   D_ifn_a_LPS=D_ifn_a;   D_ifn_g_LPS=D_ifn_g;  D_il_8_LPS= D_il_8;    D_il_10_LPS= D_il_10;   D_il_12p40_LPS=D_il_12p40;   D_tnf_a_LPS=D_tnf_a;
   ifn_a_l_LPS=ifn_a_l;   ifn_g_l_LPS=ifn_g_l;  il_8_l_LPS=il_8_l;     il_10_l_LPS=il_10_l;    il_12p40_l_LPS=il_12p40_l;   tnf_a_l_LPS=tnf_a_l;   
end;
if stimulant='MC24'  then do;
   ifn_a_MC24=ifn_a;      ifn_g_MC24=ifn_g;     il_8_MC24=il_8;        il_10_MC24=il_10;         il_12p40_MC24=il_12p40;      tnf_a_MC24=tnf_a;
   D_ifn_a_MC24=D_ifn_a;  D_ifn_g_MC24=D_ifn_g; D_il_8_MC24=D_il_8;    D_il_10_MC24=D_il_10;     D_il_12p40_MC24=D_il_12p40;  D_tnf_a_MC24=D_tnf_a;  
   ifn_a_l_MC24=ifn_a_l;  ifn_g_l_MC24=ifn_g_l; il_8_l_MC24=il_8_l;    il_10_l_MC24=il_10_l;     il_12p40_l_MC24=il_12p40_l;  tnf_a_l_MC24=tnf_a_l; 
end;
if stimulant='MC5'  then do; 
   ifn_a_MC5=ifn_a;       ifn_g_MC5=ifn_g;      il_8_MC5=il_8;         il_10_MC5=il_10;        il_12p40_MC5=il_12p40;       tnf_a_MC5=tnf_a;   
   D_ifn_a_MC5=D_ifn_a;   D_ifn_g_MC5=D_ifn_g;  D_il_8_MC5=D_il_8;     D_il_10_MC5=D_il_10;    D_il_12p40_MC5=D_il_12p40;   D_tnf_a_MC5=D_tnf_a;   
   ifn_a_l_MC5=ifn_a_l;   ifn_g_l_MC5=ifn_g_l;  il_8_l_MC5=il_8_l;     il_10_l_MC5=il_10_l;    il_12p40_l_MC5=il_12p40_l;   tnf_a_l_MC5=tnf_a_l;
end;
if stimulant='PG'   then do;  
   ifn_a_PG=ifn_a;        ifn_g_PG=ifn_g;       il_8_PG=il_8;          il_10_PG=il_10;         il_12p40_PG=il_12p40;        tnf_a_PG=tnf_a;   
   D_ifn_a_PG=D_ifn_a;    D_ifn_g_PG=D_ifn_g;   D_il_8_PG=D_il_8;      D_il_10_PG=D_il_10;     D_il_12p40_PG=D_il_12p40;    D_tnf_a_PG=D_tnf_a;
   ifn_a_l_PG=ifn_a_l;    ifn_g_l_PG=ifn_g_l;   il_8_l_PG=il_8_l;      il_10_l_PG=il_10_l;     il_12p40_l_PG=il_12p40_l;    tnf_a_l_PG=tnf_a_l;   
end;
if stimulant='PIC'  then do; 
   ifn_a_PIC=ifn_a;       ifn_g_PIC=ifn_g;      il_8_PIC=il_8;         il_10_PIC=il_10;        il_12p40_PIC=il_12p40;       tnf_a_PIC=tnf_a;   
   D_ifn_a_PIC=D_ifn_a;   D_ifn_g_PIC=D_ifn_g;  D_il_8_PIC=D_il_8;     D_il_10_PIC=D_il_10;    D_il_12p40_PIC=D_il_12p40;   D_tnf_a_PIC=D_tnf_a;    
   ifn_a_l_PIC=ifn_a_l;   ifn_g_l_PIC=ifn_g_l;  il_8_l_PIC=il_8_l;     il_10_l_PIC=il_10_l;    il_12p40_l_PIC=il_12p40_l;   tnf_a_l_PIC=tnf_a_l;   
end;
if stimulant='RSV'  then do; 
   ifn_a_RSV=ifn_a;       ifn_g_RSV=ifn_g;      il_8_RSV=il_8;         il_10_RSV=il_10;        il_12p40_RSV=il_12p40;       tnf_a_RSV=tnf_a;   
   D_ifn_a_RSV=D_ifn_a;   D_ifn_g_RSV=D_ifn_g;  D_il_8_RSV=D_il_8;     D_il_10_RSV=D_il_10;    D_il_12p40_RSV=D_il_12p40;   D_tnf_a_RSV=D_tnf_a;   
   ifn_a_l_RSV=ifn_a_l;   ifn_g_l_RSV=ifn_g_l;  il_8_l_RSV=il_8_l;     il_10_l_RSV=il_10_l;    il_12p40_l_RSV=il_12p40_l;   tnf_a_l_RSV=tnf_a_l;   
end;
if stimulant='RV'   then do;  
   ifn_a_RV=ifn_a;        ifn_g_RV=ifn_g;       il_8_RV=il_8;          il_10_RV=il_10;         il_12p40_RV=il_12p40;        tnf_a_RV=tnf_a;   
   D_ifn_a_RV=D_ifn_a;    D_ifn_g_RV=D_ifn_g;   D_il_8_RV=D_il_8;      D_il_10_RV=D_il_10;     D_il_12p40_RV=D_il_12p40;    D_tnf_a_RV=D_tnf_a;   
   ifn_a_l_RV=ifn_a_l;    ifn_g_l_RV=ifn_g_l;   il_8_l_RV=il_8_l;      il_10_l_RV=il_10_l;     il_12p40_l_RV=il_12p40_l;    tnf_a_l_RV=tnf_a_l;
end; 
if last.avisit then output;

keep studyid recruitid aprocdate aprocdate_il8 avisit site group year  
   ifn_a_CpG     ifn_g_CpG     il_8_CpG     il_10_CpG     il_12p40_CpG     tnf_a_CpG   
      ifn_a_GDQ     ifn_g_GDQ     il_8_GDQ      il_10_GDQ     il_12p40_GDQ     tnf_a_GDQ    
      ifn_a_LPS     ifn_g_LPS     il_8_LPS     il_10_LPS     il_12p40_LPS     tnf_a_LPS   
      ifn_a_MC24    ifn_g_MC24    il_8_MC24      il_10_MC24    il_12p40_MC24    tnf_a_MC24    
      ifn_a_MC5     ifn_g_MC5     il_8_MC5      il_10_MC5     il_12p40_MC5     tnf_a_MC5   
      ifn_a_PG      ifn_g_PG      il_8_PG      il_10_PG      il_12p40_PG      tnf_a_PG   
      ifn_a_PIC     ifn_g_PIC     il_8_PIC       il_10_PIC     il_12p40_PIC     tnf_a_PIC   
      ifn_a_RSV     ifn_g_RSV     il_8_RSV      il_10_RSV     il_12p40_RSV     tnf_a_RSV   
      ifn_a_RV      ifn_g_RV      il_8_RV      il_10_RV      il_12p40_RV      tnf_a_RV   

      D_ifn_a_CpG   D_ifn_g_CpG   D_il_8_CpG     D_il_10_CpG   D_il_12p40_CpG   D_tnf_a_CpG   
      D_ifn_a_GDQ   D_ifn_g_GDQ   D_il_8_GDQ     D_il_10_GDQ   D_il_12p40_GDQ   D_tnf_a_GDQ    
      D_ifn_a_LPS   D_ifn_g_LPS   D_il_8_LPS     D_il_10_LPS   D_il_12p40_LPS   D_tnf_a_LPS   
      D_ifn_a_MC24  D_ifn_g_MC24  D_il_8_MC24     D_il_10_MC24  D_il_12p40_MC24  D_tnf_a_MC24    
      D_ifn_a_MC5   D_ifn_g_MC5   D_il_8_MC5     D_il_10_MC5   D_il_12p40_MC5   D_tnf_a_MC5   
      D_ifn_a_PG    D_ifn_g_PG    D_il_8_PG     D_il_10_PG    D_il_12p40_PG    D_tnf_a_PG   
      D_ifn_a_PIC   D_ifn_g_PIC   D_il_8_PIC     D_il_10_PIC   D_il_12p40_PIC   D_tnf_a_PIC   
      D_ifn_a_RSV   D_ifn_g_RSV   D_il_8_RSV     D_il_10_RSV   D_il_12p40_RSV   D_tnf_a_RSV   
      D_ifn_a_RV    D_ifn_g_RV    D_il_8_RV     D_il_10_RV    D_il_12p40_RV    D_tnf_a_RV   

      ifn_a_l_CpG   ifn_g_l_CpG   il_8_l_CpG    il_10_l_CpG   il_12p40_l_CpG   tnf_a_l_CpG   
      ifn_a_l_GDQ   ifn_g_l_GDQ   il_8_l_GDQ    il_10_l_GDQ   il_12p40_l_GDQ   tnf_a_l_GDQ    
      ifn_a_l_LPS   ifn_g_l_LPS   il_8_l_LPS    il_10_l_LPS   il_12p40_l_LPS   tnf_a_l_LPS   
      ifn_a_l_MC24  ifn_g_l_MC24  il_8_l_MC24   il_10_l_MC24  il_12p40_l_MC24  tnf_a_l_MC24    
      ifn_a_l_MC5   ifn_g_l_MC5   il_8_l_MC5    il_10_l_MC5   il_12p40_l_MC5   tnf_a_l_MC5   
      ifn_a_l_PG    ifn_g_l_PG    il_8_l_PG     il_10_l_PG    il_12p40_l_PG    tnf_a_l_PG   
      ifn_a_l_PIC   ifn_g_l_PIC   il_8_l_PIC    il_10_l_PIC   il_12p40_l_PIC   tnf_a_l_PIC   
      ifn_a_l_RSV   ifn_g_l_RSV   il_8_l_RSV    il_10_l_RSV   il_12p40_l_RSV   tnf_a_l_RSV   
      ifn_a_l_RV    ifn_g_l_RV    il_8_l_RV     il_10_l_RV    il_12p40_l_RV    tnf_a_l_RV   ;





format D_ifn_a_CpG   D_ifn_g_CpG   D_il_8_CpG     D_il_10_CpG   D_il_12p40_CpG   D_tnf_a_CpG   
      D_ifn_a_GDQ   D_ifn_g_GDQ   D_il_8_GDQ     D_il_10_GDQ   D_il_12p40_GDQ   D_tnf_a_GDQ    
      D_ifn_a_LPS   D_ifn_g_LPS   D_il_8_LPS     D_il_10_LPS   D_il_12p40_LPS   D_tnf_a_LPS   
      D_ifn_a_MC24  D_ifn_g_MC24  D_il_8_MC24     D_il_10_MC24  D_il_12p40_MC24  D_tnf_a_MC24    
      D_ifn_a_MC5   D_ifn_g_MC5   D_il_8_MC5     D_il_10_MC5   D_il_12p40_MC5   D_tnf_a_MC5   
      D_ifn_a_PG    D_ifn_g_PG    D_il_8_PG     D_il_10_PG    D_il_12p40_PG    D_tnf_a_PG   
      D_ifn_a_PIC   D_ifn_g_PIC   D_il_8_PIC     D_il_10_PIC   D_il_12p40_PIC   D_tnf_a_PIC   
      D_ifn_a_RSV   D_ifn_g_RSV   D_il_8_RSV     D_il_10_RSV   D_il_12p40_RSV   D_tnf_a_RSV   
      D_ifn_a_RV    D_ifn_g_RV    D_il_8_RV     D_il_10_RV    D_il_12p40_RV    D_tnf_a_RV    yesnofm.;
run;


*********************************************************************************************
                      Derive Dataset: Wide, One rec per person per visit
********************************************************************************************;
proc sort data=wide1 out=wide2;
   by studyid avisit;
run;
proc sort data=shell;
   by studyid avisit;
run;

data derive.childcytoinnate_w;
merge shell wide2(in=a);
miss_n = cmiss(of ifn_a_CpG -- tnf_a_l_RV);

if a=1 and miss_n ne 162 then childcytoinnate_w=1; else childcytoinnate_w=0;




label    ifn_a_CpG       ='IFN-a, Stimulant:CpG'
      ifn_g_CpG       ='IFN-g, Stimulant:CpG'
      il_8_CpG       ='IL-8, Stimulant:CpG'
      il_10_CpG       ='IL-10, Stimulant:CpG'
      il_12p40_CpG    ='IL-12(p40), Stimulant:CpG'
      tnf_a_CpG      ='TNF-a, Stimulant:CpG'
      ifn_a_l_CpG    ='IFN-a, log-transformed, Stimulant:CpG'
      ifn_g_l_CpG    ='IFN-g, log-transformed, Stimulant:CpG'
      il_8_l_CpG        ='IL-8, log-transformed, Stimulant:CpG'
      il_10_l_CpG    ='IL-10, log-transformed, Stimulant:CpG'
      il_12p40_l_CpG    ='IL-12(p40), log-transformed, Stimulant:CpG'
      tnf_a_l_CpG      ='TNF-a, log-transformed, Stimulant:CpG'
      D_ifn_a_CpG    ='Detectable IFN-a, Stimulant:CpG'
      D_ifn_g_CpG    ='Detectable IFN-g, Stimulant:CpG'
      D_il_8_CpG      ='Detectable IL-8, Stimulant:CpG'
      D_il_10_CpG    ='Detectable IL-10, Stimulant:CpG'
      D_il_12p40_CpG    ='Detectable IL-12(p40), Stimulant:CpG'
      D_tnf_a_CpG      ='Detectable TNF-a, Stimulant:CpG'

      ifn_a_GDQ       ='IFN-a, Stimulant: GDQ'
      ifn_g_GDQ       ='IFN-g, Stimulant: GDQ'
      il_8_GDQ       ='IL-8, Stimulant: GDQ'
      il_10_GDQ       ='IL-10, Stimulant: GDQ'
      il_12p40_GDQ    ='IL-12(p40), Stimulant: GDQ'
      tnf_a_GDQ      ='TNF-a, Stimulant: GDQ'
      ifn_a_l_GDQ    ='IFN-a, log-transformed, Stimulant: GDQ'
      ifn_g_l_GDQ    ='IFN-g, log-transformed, Stimulant: GDQ'
      il_8_l_GDQ       ='IL-8, log-transformed, Stimulant: GDQ'
      il_10_l_GDQ    ='IL-10, log-transformed, Stimulant: GDQ'
      il_12p40_l_GDQ    ='IL-12(p40), log-transformed, Stimulant: GDQ'
      tnf_a_l_GDQ      ='TNF-a, log-transformed, Stimulant: GDQ'
      D_ifn_a_GDQ    ='Detectable IFN-a, Stimulant: GDQ'
      D_ifn_g_GDQ    ='Detectable IFN-g, Stimulant: GDQ'
      D_il_8_GDQ       ='Detectable IL-8, Stimulant: GDQ'
      D_il_10_GDQ    ='Detectable IL-10, Stimulant: GDQ'
      D_il_12p40_GDQ    ='Detectable IL-12(p40), Stimulant: GDQ'
      D_tnf_a_GDQ      ='Detectable TNF-a, Stimulant: GDQ'

      ifn_a_LPS       ='IFN-a, Stimulant: LPS'
      ifn_g_LPS       ='IFN-g, Stimulant: LPS'
      il_8_LPS       ='IL-8, Stimulant: LPS'
      il_10_LPS       ='IL-10, Stimulant: LPS'
      il_12p40_LPS    ='IL-12(p40), Stimulant: LPS'
      tnf_a_LPS      ='TNF-a, Stimulant: LPS'
      ifn_a_l_LPS    ='IFN-a, log-transformed, Stimulant: LPS'
      ifn_g_l_LPS    ='IFN-g, log-transformed, Stimulant: LPS'
      il_8_l_LPS       ='IL-8, log-transformed, Stimulant: LPS'
      il_10_l_LPS    ='IL-10, log-transformed, Stimulant: LPS'
      il_12p40_l_LPS    ='IL-12(p40), log-transformed, Stimulant: LPS'
      tnf_a_l_LPS      ='TNF-a, log-transformed, Stimulant: LPS'
      D_ifn_a_LPS    ='Detectable IFN-a, Stimulant: LPS'
      D_ifn_g_LPS    ='Detectable IFN-g, Stimulant: LPS'
      D_il_8_LPS       ='Detectable IL-8, Stimulant: LPS'
      D_il_10_LPS    ='Detectable IL-10, Stimulant: LPS'
      D_il_12p40_LPS    ='Detectable IL-12(p40), Stimulant: LPS'
      D_tnf_a_LPS      ='Detectable TNF-a, Stimulant: LPS'

      ifn_a_MC24       ='IFN-a, Stimulant: MC24'
      ifn_g_MC24       ='IFN-g, Stimulant: MC24'
      il_8_MC24       ='IL-8, Stimulant: MC24'
      il_10_MC24       ='IL-10, Stimulant: MC24'
      il_12p40_MC24    ='IL-12(p40), Stimulant: MC24'
      tnf_a_MC24      ='TNF-a, Stimulant: MC24'
      ifn_a_l_MC24    ='IFN-a, log-transformed, Stimulant: MC24'
      ifn_g_l_MC24    ='IFN-g, log-transformed, Stimulant: MC24'
      il_8_l_MC24    ='IL-8, log-transformed, Stimulant: MC24'
      il_10_l_MC24    ='IL-10, log-transformed, Stimulant: MC24'
      il_12p40_l_MC24 ='IL-12(p40), log-transformed, Stimulant: MC24'
      tnf_a_l_MC24   ='TNF-a, log-transformed, Stimulant: MC24'
      D_ifn_a_MC24    ='Detectable IFN-a, Stimulant: MC24'
      D_ifn_g_MC24    ='Detectable IFN-g, Stimulant: MC24'
      D_il_8_MC24    ='Detectable IL-8, Stimulant: MC24'
      D_il_10_MC24    ='Detectable IL-10, Stimulant: MC24'
      D_il_12p40_MC24 ='Detectable IL-12(p40), Stimulant: MC24'
      D_tnf_a_MC24   ='Detectable TNF-a, Stimulant: MC24'

      ifn_a_MC5        ='IFN-a, Stimulant: MC5'
      ifn_g_MC5        ='IFN-g, Stimulant: MC5'
      il_8_MC5        ='IL-8, Stimulant: MC5'
      il_10_MC5        ='IL-10, Stimulant: MC5'
      il_12p40_MC5     ='IL-12(p40), Stimulant: MC5'
      tnf_a_MC5       ='TNF-a, Stimulant: MC5'
      ifn_a_l_MC5     ='IFN-a, log-transformed, Stimulant: MC5'
      ifn_g_l_MC5     ='IFN-g, log-transformed, Stimulant: MC5'
      il_8_l_MC5     ='IL-8, log-transformed, Stimulant: MC5'
      il_10_l_MC5     ='IL-10, log-transformed, Stimulant: MC5'
      il_12p40_l_MC5  ='IL-12(p40), log-transformed, Stimulant: MC5'
      tnf_a_l_MC5    ='TNF-a, log-transformed, Stimulant: MC5'
      D_ifn_a_MC5     ='Detectable IFN-a, Stimulant: MC5'
      D_ifn_g_MC5     ='Detectable IFN-g, Stimulant: MC5'
      D_il_8_MC5     ='Detectable IL-8, Stimulant: MC5'
      D_il_10_MC5     ='Detectable IL-10, Stimulant: MC5'
      D_il_12p40_MC5  ='Detectable IL-12(p40), Stimulant: MC5'
      D_tnf_a_MC5    ='Detectable TNF-a, Stimulant: MC5'

      ifn_a_PG       ='IFN-a, Stimulant: PG'
      ifn_g_PG       ='IFN-g, Stimulant: PG'
      il_8_PG       ='IL-8, Stimulant: PG'
      il_10_PG       ='IL-10, Stimulant: PG'
      il_12p40_PG    ='IL-12(p40), Stimulant: PG'
      tnf_a_PG      ='TNF-a, Stimulant: PG'
      ifn_a_l_PG       ='IFN-a, log-transformed, Stimulant: PG'
      ifn_g_l_PG       ='IFN-g, log-transformed, Stimulant: PG'
      il_8_l_PG       ='IL-8, log-transformed, Stimulant: PG'
      il_10_l_PG       ='IL-10, log-transformed, Stimulant: PG'
      il_12p40_l_PG    ='IL-12(p40), log-transformed, Stimulant: PG'
      tnf_a_l_PG      ='TNF-a, log-transformed, Stimulant: PG'
      D_ifn_a_PG       ='Detectable IFN-a, Stimulant: PG'
      D_ifn_g_PG       ='Detectable IFN-g, Stimulant: PG'
      D_il_8_PG       ='Detectable IL-8, Stimulant: PG'
      D_il_10_PG       ='Detectable IL-10, Stimulant: PG'
      D_il_12p40_PG    ='Detectable IL-12(p40), Stimulant: PG'
      D_tnf_a_PG      ='Detectable TNF-a, Stimulant: PG'

      ifn_a_PIC       ='IFN-a, Stimulant: PIC'
      ifn_g_PIC       ='IFN-g, Stimulant: PIC'
      il_8_PIC       ='IL-8, Stimulant: PIC'
      il_10_PIC       ='IL-10, Stimulant: PIC'
      il_12p40_PIC    ='IL-12(p40), Stimulant: PIC'
      tnf_a_PIC      ='TNF-a, Stimulant: PIC'
      ifn_a_l_PIC    ='IFN-a, log-transformed, Stimulant: PIC'
      ifn_g_l_PIC    ='IFN-g, log-transformed, Stimulant: PIC'
      il_8_l_PIC    ='IL-8, log-transformed, Stimulant: PIC'
      il_10_l_PIC    ='IL-10, log-transformed, Stimulant: PIC'
      il_12p40_l_PIC    ='IL-12(p40), log-transformed, Stimulant: PIC'
      tnf_a_l_PIC      ='TNF-a, log-transforme, Stimulant: PIC'
      D_ifn_a_PIC    ='Detectable IFN-a, Stimulant: PIC'
      D_ifn_g_PIC    ='Detectable IFN-g, Stimulant: PIC'
      D_il_8_PIC       ='Detectable IL-8, Stimulant: PIC'
      D_il_10_PIC    ='Detectable IL-10, Stimulant: PIC'
      D_il_12p40_PIC    ='Detectable IL-12(p40), Stimulant: PIC'
      D_tnf_a_PIC      ='Detectable TNF-a, Stimulant: PIC'


      ifn_a_RSV       ='IFN-a, Stimulant: RSV'
      ifn_g_RSV       ='IFN-g, Stimulant: RSV'
      il_8_RSV       ='IL-8, Stimulant: RSV'
      il_10_RSV       ='IL-10, Stimulant: RSV'
      il_12p40_RSV    ='IL-12(p40), Stimulant: RSV'
      tnf_a_RSV      ='TNF-a, Stimulant: RSV'
      ifn_a_l_RSV    ='IFN-a, log-transformed, Stimulant: RSV'
      ifn_g_l_RSV    ='IFN-g, log-transformed, Stimulant: RSV'
      il_8_l_RSV       ='IL-8, log-transformed, Stimulant: RSV'
      il_10_l_RSV    ='IL-10, log-transformed, Stimulant: RSV'
      il_12p40_l_RSV    ='IL-12(p40), log-transformed, Stimulant: RSV'
      tnf_a_l_RSV      ='TNF-a, log-transformed, Stimulant: RSV'
      D_ifn_a_RSV    ='Detectable IFN-a, Stimulant: RSV'
      D_ifn_g_RSV    ='Detectable IFN-g, Stimulant: RSV'
      D_il_8_RSV       ='Detectable IL-8, Stimulant: RSV'
      D_il_10_RSV    ='Detectable IL-10, Stimulant: RSV'
      D_il_12p40_RSV    ='Detectable IL-12(p40), Stimulant: RSV'
      D_tnf_a_RSV      ='Detectable TNF-a, Stimulant: RSV'

      ifn_a_RV       ='IFN-a, Stimulant: RV'
      ifn_g_RV       ='IFN-g, Stimulant: RV'
      il_8_RV       ='IL-8, Stimulant: RV'
      il_10_RV       ='IL-10, Stimulant: RV'
      il_12p40_RV    ='IL-12(p40), Stimulant: RV'
      tnf_a_RV      ='TNF-a, Stimulant: RV'
      ifn_a_l_RV       ='IFN-a, log-transformed, Stimulant: RV'
      ifn_g_l_RV       ='IFN-g, log-transformed, Stimulant: RV'
      il_8_l_RV       ='IL-8, log-transformed, Stimulant: RV'
      il_10_l_RV       ='IL-10, log-transformed, Stimulant: RV'
      il_12p40_l_RV    ='IL-12(p40), log-transformed, Stimulant: RV'
      tnf_a_l_RV      ='TNF-a, log-transformed, Stimulant: RV'
      D_ifn_a_RV       ='Detectable IFN-a, Stimulant: RV'
      D_ifn_g_RV       ='Detectable IFN-g, Stimulant: RV'
      D_il_8_RV       ='Detectable IL-8, Stimulant: RV'
      D_il_10_RV       ='Detectable IL-10, Stimulant: RV'
      D_il_12p40_RV    ='Detectable IL-12(p40), Stimulant: RV'
      D_tnf_a_RV      ='Detectable TNF-a, Stimulant: RV'
      ;
run;

*** Codebooks;
*** Codebooks;
/*%inc "I:\RHO_APPS\Codebooks\codebook.sas";
%codebook(file=derive.childcytoinnate_w,
          formats=library,
          save=T,
        savecsv=T,
        clean=T,
        savename=childcytoinnate_w,
        saveloc=%str(S:/RhoFED/ICAC/Studies/URECA/Data/Derive/CBK),
          pdfname=childcytoinnate_w,
          pdfloc=%str(S:/RhoFED/ICAC/Studies/URECA/Data/Derive/CBK));

%codebook(file=derive.childcytoinnate_l,
          formats=library,
          save=T,
        savecsv=T,
        clean=T,
        savename=childcytoinnate_l,
        saveloc=%str(S:/RhoFED/ICAC/Studies/URECA/Data/Derive/CBK),
          pdfname=childcytoinnate_l,
          pdfloc=%str(S:/RhoFED/ICAC/Studies/URECA/Data/Derive/CBK));

%codebook(file=derive.childcytoinnate_all,
          formats=library,
          save=T,
        savecsv=T,
        clean=T,
        savename=childcytoinnate_all,
        saveloc=%str(S:/RhoFED/ICAC/Studies/URECA/Data/Derive/CBK),
          pdfname=childcytoinnate_all,
          pdfloc=%str(S:/RhoFED/ICAC/Studies/URECA/Data/Derive/CBK)); */


%include 'S:\BASESTAT\RhoUtil\gitGot.sas';
    %gitGot
        (repo = https://github.com/RhoInc/sas-codebook
        ,folder = Macros);

%codebook_generic
        (data = derive.childCytoInnate_all
        ,pdfpath = S:/RhoFED/ICAC/Studies/URECA/Data/Derive/CBK);

%codebook_generic
        (data = derive.childcytoInnate_l
        ,pdfpath = S:/RhoFED/ICAC/Studies/URECA/Data/Derive/CBK);

%codebook_generic
        (data = derive.childcytoInnate_w
        ,pdfpath = S:/RhoFED/ICAC/Studies/URECA/Data/Derive/CBK);



* Save log and output files, must be ordered out then log;
dm WPGM "out; print file=output replace;" WPGM; 
dm WPGM "log; print file=log replace;" WPGM;
